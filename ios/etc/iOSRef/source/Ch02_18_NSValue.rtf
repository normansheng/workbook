{\rtf1\ansi\ansicpg932\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10640\viewh13700\viewkind0
\deftab720
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural

\f0\fs24 \cf0 #pragma mark NSValue valueWithRange\
-(void)method003\
\{\
    NSMutableDictionary *aDictionary = [NSMutableDictionary dictionaryWithCapacity:3];\
    \
    [aDictionary setValue:@"ddd" forKey:@"stringKey"];\
    \
    NSRange aRange = NSMakeRange(0, 10);\
    [aDictionary setObject:[NSValue valueWithRange:aRange] forKey:@"rangeKey"];\
    \
    \
    NSLog(@"%s %p %@",__FUNCTION__,aDictionary,[aDictionary valueForKey:@"@allValues"]);\
    //=>-[OOOAppDelegate method003] 0x6a2ac10 (ddd,"NSRange: \{0, 10\}")\
\}\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab640\pardirnatural
\cf0 \
\
\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural
\cf0 #pragma mark NSValue @encode(CGPoint)\
-(void)method004\
\{\
    NSMutableDictionary *aDictionary = [NSMutableDictionary dictionaryWithCapacity:10];\
    \
    [aDictionary setValue:@"ddd" forKey:@"stringKey"];\
    \
    CGPoint aPoint = CGPointMake(0, 200);\
    \
    [aDictionary setObject:[NSValue value:&aPoint withObjCType:@encode(CGPoint)] forKey:@"objcKey"];\
    \
    NSLog(@"%s %p %@",__FUNCTION__,aDictionary,[aDictionary valueForKey:@"@allValues"]);\
    //=>-[OOOAppDelegate method001] 0x6a2ac10 (ddd,"NSPoint: \{0, 200\}")\
    \
\}\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab640\pardirnatural
\cf0 \
\
\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural
\cf0 #pragma mark NSValue objCType\
-(void)method007\
\{\
    NSMutableDictionary *aDictionary = [NSMutableDictionary dictionaryWithCapacity:10];\
    \
    char *cString = "My name is OOMORI.";\
    NSValue *aValue = [NSValue valueWithBytes:cString objCType:@encode(char *) ];\
                       \
    [aDictionary setObject:aValue forKey:@"objcKey"];\
    \
    NSLog(@"%s %s",__FUNCTION__,[aValue objCType]);\
    NSLog(@"%s %@",__FUNCTION__,[aDictionary description]);\
    //=>-[OOOAppDelegate method001] 0x6a2ac10 (ddd,"NSPoint: \{0, 200\}")\
    NSLog(@"%s %p %@",__FUNCTION__,aDictionary,[aDictionary valueForKey:@"objcKey"]);\
\}\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab640\pardirnatural
\cf0 \
\
\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural
\cf0 #pragma mark NSValue valueWithPointer\
-(void)method009\
\{\
    NSMutableDictionary *aDictionary = [NSMutableDictionary dictionaryWithCapacity:10];\
    \
    char *localString = "My name is OOMORI.";\
	NSValue *theValue = [NSValue valueWithPointer: localString ];\
	[aDictionary setObject:theValue forKey:@"objcKey"];\
    \
    char *theCString;\
    theCString = [[aDictionary valueForKey:@"objcKey"] pointerValue];\
    \
	NSLog(@"%s %s",__FUNCTION__,theCString);\
    \
    NSLog(@"%s %s",__FUNCTION__,[theValue objCType]);\
\}\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab640\pardirnatural
\cf0 \
\
\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural
\cf0 #pragma mark NSValue @encode(myStruct)\
typedef struct \{	\
    NSUInteger point;\
    NSUInteger length;\
\} MYStruct;\
-(void)method002\
\{\
    NSMutableDictionary *aDictionary = [NSMutableDictionary dictionaryWithCapacity:10];\
    \
    [aDictionary setValue:@"ddd" forKey:@"key4"];\
    \
    NSRange aRange = NSMakeRange(0, 10);\
    [aDictionary setObject:[NSValue valueWithRange:aRange] forKey:@"keyNSRange"];\
    \
    MYStruct myStruct;\
    myStruct.point = 0;\
    myStruct.length = 10;\
    \
    \
    [aDictionary setObject:[NSValue value:&myStruct withObjCType:@encode(MYStruct)] forKey:@"keyMYStruct"];\
    \
    NSLog(@"%s %p %@",__FUNCTION__,aDictionary,[aDictionary valueForKey:@"@allValues"]);\
    \
    NSValue *structValue = [aDictionary objectForKey:@"keyMYStruct"];\
    MYStruct myStruct2;\
	\
    [structValue getValue:&myStruct2];\
    \
    NSLog(@"%s %p %d",__FUNCTION__,aDictionary,myStruct2.length);\
    //=>10\
    \
\}\
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab640\pardirnatural
\cf0 \
\
\
\
#pragma mark NSValue isEqualToValue\
-(void)method010\
\{\
    CGPoint aPoint = CGPointMake(0, 200);\
    NSValue *aValue = [NSValue value:&aPoint withObjCType:@encode(CGPoint)];\
\
    CGPoint bPoint = CGPointMake(0, 200);\
    NSValue *bValue = [NSValue value:&bPoint withObjCType:@encode(CGPoint)];\
    \
    CGPoint cPoint = CGPointMake(200, 200);\
    NSValue *cValue = [NSValue value:&cPoint withObjCType:@encode(CGPoint)];\
\
    NSLog(@"a vs b %@",([aValue isEqualToValue:bValue]?@"YES":@"NO"));\
    NSLog(@"a vs c %@",([aValue isEqualToValue:cValue]?@"YES":@"NO"));\
\
\}\
}