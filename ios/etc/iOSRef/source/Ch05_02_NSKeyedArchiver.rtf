{\rtf1\ansi\ansicpg932\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10640\viewh13700\viewkind0
\deftab720
\pard\tx0\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural

\f0\fs24 \cf0 \
-(void)method003\
\{\
    NSMutableData *data = [NSMutableData data];\
    NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc]\
                                 initForWritingWithMutableData:data];\
    NSString *string = @"string";\
    \
    //NewObject\'82\'c6\'82\'b5\'82\'c4\'93\'c7\'82\'dd\'8d\'9e\'82\'de\'8f\'ea\'8d\'87\'82\'cd\'82\'b1\'82\'bf\'82\'e7\
    //[NSKeyedArchiver setClassName:@"NewObject" forClass:[MyObject class]];\
    //NSLog(@"-----%@",[NSKeyedArchiver classNameForClass:[MyObject class]]);\
    \
    //NewObject\'82\'c6\'82\'b5\'82\'c4\'93\'c7\'82\'dd\'8d\'9e\'82\'de\'8f\'ea\'8d\'87\'82\'cd\'82\'b1\'82\'bf\'82\'e7\
    //[archiver setClassName:@"NewObject" forClass:[MyObject class]];\
    //NSLog(@"-----%@",[archiver classNameForClass:[MyObject class]]);\
    \
    [archiver setOutputFormat:NSPropertyListBinaryFormat_v1_0];\
    [archiver setDelegate:self];\
    switch ([archiver outputFormat]) \{\
        case NSPropertyListXMLFormat_v1_0:\
                NSLog(@"NSPropertyListXMLFormat_v1_0");\
            break;\
        case NSPropertyListBinaryFormat_v1_0:\
            NSLog(@"NSPropertyListBinaryFormat_v1_0");\
            break;\
            \
        default:\
            break;\
    \}\
             \
    [archiver encodeObject:string forKey:@"stringKey"];\
    [archiver encodeBool:YES forKey:@"boolKey"];\
    \
    unsigned char aBuffer[200];\
    NSString *str = @"This is a pen.";\
    NSData *dat1 = [NSData dataWithBytes:[str cStringUsingEncoding:NSUTF8StringEncoding] length:[str lengthOfBytesUsingEncoding:NSUTF8StringEncoding]];\
    [dat1 getBytes:aBuffer length:[str length]];\
    [archiver encodeBytes:aBuffer length:[str length] forKey:@"bytesKey"];\
    \
    MyObject *string1 = [[MyObject alloc] init];\
    [string1 setValue:@"string1" forKey:@"string"];\
    MyObject *string2 = [[MyObject alloc] init];\
    MyObject *string3 = [[MyObject alloc] init];\
    NSMutableArray *mArray = [NSMutableArray arrayWithCapacity:5];\
    [mArray addObject:string1];\
    [mArray addObject:string2];\
    [mArray addObject:string3];\
    [archiver encodeObject:mArray forKey:@"conditionalObjectKey"];\
    //[archiver encodeConditionalObject:mArray forKey:@"conditionalObjectKey"];\
    [archiver finishEncoding];\
    \
    NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\
    NSString *filename = @"testWrite.archive";\
    NSURL *aURL = [NSURL fileURLWithPathComponents:[NSArray arrayWithObjects:documentsDirectory, filename, nil]];\
    \
    if ([data writeToURL:aURL atomically:YES])\{\
        NSLog(@"write YES");\
    \}else\{\
        NSLog(@"write NO");\
    \}\
    \
    //------------------\'93\'c7\'82\'dd\'8d\'9e\'82\'dd------------------\
    NSMutableData *readData = [NSMutableData dataWithContentsOfURL:aURL];\
    NSLog(@"%@",[readData description]);\
    //\'83\'41\'83\'93\'83\'41\'81\'5b\'83\'4a\'83\'43\'83\'75\
    NSKeyedUnarchiver *unArchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:readData];\
    \
    \
    NSLog(@"%s unArchivedObj = %@",__FUNCTION__,[unArchiver decodeObjectForKey:@"stringKey"]);\
    NSLog(@"%s unArchivedObj = %@",__FUNCTION__,([unArchiver decodeObjectForKey:@"boolKey"])?@"YES":@"NO");\
    \
    const uint8_t *mPointer;\
    NSUInteger lengthInteger = 0;\
    mPointer = [unArchiver decodeBytesForKey:@"bytesKey" returnedLength:&lengthInteger ];\
    NSString *output = [[NSString alloc] initWithBytes:mPointer\
                                                length:lengthInteger\
                                              encoding:NSUTF8StringEncoding];\
    NSLog(@"%s unArchivedObj = %@",__FUNCTION__,output);\
    \
    //MyObject\'82\'cc\'83\'47\'83\'93\'83\'52\'81\'5b\'83\'68\
    //[encoder encodeConditionalObject:string forKey:@"string"];\
    //\'82\'c9\'82\'c8\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'82\'c6\'93\'e0\'97\'65\'82\'cd\'95\'db\'8e\'9d\'82\'b3\'82\'ea\'82\'c8\'82\'a2\'81\'42\
    id mArray2 = [unArchiver decodeObjectForKey:@"conditionalObjectKey"];\
    \
    NSLog(@"%s unArchivedObj = %@",__FUNCTION__,[mArray2 objectAtIndex:0]);\
    NSLog(@"%s unArchivedObj = %@",__FUNCTION__,[[mArray2 objectAtIndex:0] class]);\
\}\
}